package io.github.asharapov.logtrace;

import java.io.Closeable;
import java.time.temporal.TemporalAccessor;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * <p>Представляет собой основополагающий строительный блок для задач логирования и трассировки выполнения задачи в распределенных системах.
 * Содержит описание ключевых характеристик отдельной задачи (единицы работы) выполняемой в распределенной системе.</p>
 * <p>В рамках одного потока выполнения, API допускает наличие большого количества одновременно выполняющихся задач (каждая такая задача, как правило,
 * представляет собой композицию из большого количества более мелких задач), но активных (в рамках потока) задач не может быть больше одной.</p>
 *
 * @author Anton Sharapov
 */
public interface LogSpan extends Closeable {

    /**
     * Уникальный идентификатор пользовательской бизнес-операции.
     * Является общим для всей иерархии работ выполняемых в рамках этой бизнес-операции.
     * Инициализируется автоматически.
     */
    String getTraceId();

    /**
     * Ссылка на блок работ более высокого уровня, выполняемых в рамках той же пользовательской бизнес-операции что и текущий блок работ.
     * Для дескриптора корневого блока работ вернет <code>null</code>.
     */
    LogSpan getParentSpan();

    /**
     * Возвращает <code>true</code> если данный блок работ еще не был завершен (до вызова метода {@link #close()}).
     */
    boolean isActive();

    /**
     * Время (ms) начала выполнения данного блока работ.
     */
    long getStartTime();

    /**
     * Возвращает время выполнения данного блока работ до момента его завершения.
     * Для блока работ, находящегося в процессе выполнения (до вызова метода {@link #close()}), метод вернет <code>0</code>.
     */
    long getDuration();

    /**
     * <p>Название или краткое описание блока работы используемое при фиксировании в логе событий его начала и завершении.</p>
     * <p>По умолчанию, если в конструкторе дескриптора блока работы этот признак не был указан явно используется уникальное название операции - {@linkplain #getOperation()}</p>
     */
    String getEventName();

    /**
     * <p>Задает некоторое пространство имен, в пределах которого каждому различному виду работ должно соответствовать свое
     * уникальное название (задается свойством {@link #getOperation()}).</p>
     * <p>Название пространства имен должно начинаться с буквы латинского алфавита и может включать в себя буквы латинского алфавита и цифры.</p>
     * <p>По умолчанию, имеет значение: <b><code>ctx</code></b></p>
     */
    String getNamespace();

    /**
     * Уникальное название (в пределах заданного свойством {@link #getNamespace()} пространства имен) задачи/операции,
     * для описания которой служит данный объект.
     */
    String getOperation();

    /**
     * Возвращает список ранее назначенных тегов.
     */
    List<Tag> getTags();

    /**
     * Возвращает сведения о теге с указанным именем для данного блока работ.
     *
     * @param tagName название атрибута.
     * @return сведения об искомом теге если он присутствует в описании для данного блока работ.
     */
    Optional<Tag> getTag(String tagName);

    /**
     * Возвращает <code>true</code> если описание данного блока работ содержит атрибут с указанным названием.
     *
     * @param tagName название атрибута.
     */
    boolean hasTag(String tagName);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, Enum<?> value);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, String value);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, Boolean value);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, Number value);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, Date value);

    /**
     * Установка атрибута и его значения для данного блока работ.
     *
     * @param key   название атрибута. Представляет собой непустую строку из латинских букв и цифр.
     * @param value значение атрибута.
     * @return ссылка на данный блок работ.
     */
    LogSpan setTag(String key, TemporalAccessor value);

    /**
     * Отмечает что в ходе выполнения данного блока работ произошла ошибка существенно повлиявшая на его результаты.
     *
     * @param cause стек ошибки
     * @see #getErrorCause()
     */
    void markAsFailed(Throwable cause);

    /**
     * Возвращает стек ошибки, приведшей к прерыванию данного блока работ.
     *
     * @see #markAsFailed(Throwable)
     */
    Throwable getErrorCause();

    /**
     * <p>Завершение данного блока работ по ошибке.</p>
     * <p>Данный вызов семантически эквивалентен командам:
     * <pre><code>
     * span.markAsFailed(cause);
     * span.close();
     * </code></pre></p>
     */
    void close(Throwable cause);

    /**
     * Завершение данного блока работ.
     */
    @Override
    void close();
}
